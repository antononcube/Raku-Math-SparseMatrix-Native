use v6.d;

use lib <. lib>;
use Math::SparseMatrix::Native;
use Math::SparseMatrix::Native::Utilities;
use Test;

my $nrow = 5;
my $ncol = 8;
my $density = 0.25;
my $nnz = ($nrow * $ncol * $density).Int;
my $seed = 3432;

my $matrix1 = Math::SparseMatrix::Native::CSRStruct.new.random(:$nrow, :$ncol, :$nnz, :$seed);
my $matrix2 = Math::SparseMatrix::Native::CSRStruct.new.random(nrow => $ncol, ncol => $nrow, :$nnz, :$seed);

plan *;

## 1
isa-ok $matrix1, Math::SparseMatrix::Native::CSRStruct:D;

## 2
isa-ok $matrix2, Math::SparseMatrix::Native::CSRStruct:D;

## 3
my @vec3 = rand xx $ncol;
isa-ok
        $matrix1.dot(@vec3),
        Array:D,
        "Expected type of matrix-vector dot product";

## 4
my $res4 = $matrix1.dot(@vec3);
is
        $res4.elems,
        $nrow,
        "Expected number of columns";

## 5
is
        ($res4 <<->> dense-dot-product($matrix1.Array, @vec3.map({ [$_,] }))).map(*.Slip).max < 1e-12,
        True,
        "Same vector";

## 6
isa-ok
        $matrix1.dot($matrix2),
        Math::SparseMatrix::Native::CSRStruct:D,
        "Expected matrix-matrix dot product type";

## 7
my $res7 = $matrix1.dot($matrix2);
is-deeply
        $res7.dimensions,
        ($nrow, $nrow),
        "Dimensions of matrix-matrix product";

## 8
#$res7.print;
#say dense-dot-product($matrix1.Array, $matrix2.Array);
my $dp8 = dense-dot-product($matrix1.Array, $matrix2.Array);
is
        elementwise-operation($res7.Array, $dp8, &infix:<->).map(*.Slip)>>.abs.max < 1e-12,
        True,
        "Same matrix (element-wise operation)";

## 9
## Equivalent to the test above, but using Math::SparseMatrix::Native::CSRStruct operations.
is
        $res7.add(Math::SparseMatrix::Native::CSRStruct.new(dense-matrix => $dp8).multiply(-1)).Array.map(*.Slip)>>.abs.max < 1e-12,
        True,
        "Same matrix (sparse matrix operations)";

## 10
is
        $res7.eqv(Math::SparseMatrix::Native::CSRStruct.new(dense-matrix => $dp8), tol => 1e-12),
        True,
        "Matrix-matrix products equivalence";

## 11
my $smat11 = $matrix1.clone;
my @vec11 = rand xx $matrix1.ncol;
isa-ok $smat11.dot(@vec11), Array:D;

## 12
isa-ok $smat11.dot(rand xx $matrix1.ncol), Array:D;

done-testing;
